//=======================================================================
//			Copyright XashXT Group 2007 ©
//		        logging.c - std lib portable utils
//=======================================================================

#include "launch.h"

void Sys_InitLog( void )
{
	const char	*mode;

	if( Sys.app_state == SYS_RESTART )
		mode = "a";
	else mode = "w";

	// create log if needed
	if( Sys.log_active && !Sys.con_silentmode )
	{
		Sys.logfile = FS_Open( Sys.log_path, mode );
		if(!Sys.logfile) MsgDev( D_ERROR, "Sys_InitLog: can't create log file %s\n", Sys.log_path );

		FS_Print( Sys.logfile, "=======================================================================\n" );
		FS_Printf( Sys.logfile, "\t%s started at %s\n", Sys.caption, com_timestamp(TIME_FULL));
		FS_Print( Sys.logfile, "=======================================================================\n");
		FS_Print( Sys.logfile, Sys.log_buffer ); // write all queued messages 
		Sys.log_buffer[0] = '\0';
	}
}

void Sys_CloseLog( void )
{
	string	event_name;

	// continue logged
	switch( Sys.app_state )
	{
	case SYS_ABORT: com_strncpy( event_name, "aborted by user", MAX_STRING ); break;
	case SYS_ERROR: com_strncpy( event_name, "stopped with error", MAX_STRING ); break;
	case SYS_RESTART: com_strncpy( event_name, "restarted", MAX_STRING ); break;
	default: com_strncpy( event_name, "stopped", MAX_STRING ); break;
	}

	if( Sys.logfile )
	{
		FS_Print( Sys.logfile, "\n");
		FS_Print( Sys.logfile, "=======================================================================");
		FS_Printf( Sys.logfile, "\n\t%s %s at %s\n", Sys.caption, event_name, com_timestamp(TIME_FULL));
		FS_Print( Sys.logfile, "=======================================================================\n");
		if( Sys.app_state == SYS_RESTART ) FS_Print( Sys.logfile, "\n" ); // just for tabulate

		FS_Close( Sys.logfile );
		Sys.logfile = NULL;
	}
}

void Sys_PrintLog( const char *pMsg )
{
	if( !Sys.log_active ) return;
	if( !Sys.logfile ) // copy message into queued buffer
		com_strncat( Sys.log_buffer, pMsg, LOG_QUEUE_SIZE ); 
	else FS_Print( Sys.logfile, pMsg ); // normal logging
}